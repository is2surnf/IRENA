# backend/app/utils/seed_teoria.py
"""
Script para poblar la base de datos con datos de ejemplo de teor√≠a qu√≠mica
"""

from sqlalchemy.orm import Session
from sqlalchemy import func
from app.database import SessionLocal
from app.models.teoria import Teoria, TeoriaTareaSimulacion
import logging

logger = logging.getLogger(__name__)

# Datos de ejemplo para teor√≠as
TEORIAS_EJEMPLO = [
    {
        "titulo": "Introducci√≥n a la Estructura At√≥mica",
        "contenido": """
La estructura at√≥mica es fundamental para entender la qu√≠mica moderna. Un √°tomo est√° compuesto por:

1. **N√∫cleo**: Contiene protones (carga positiva) y neutrones (sin carga)
2. **Electrones**: Part√≠culas con carga negativa que orbitan alrededor del n√∫cleo

**Conceptos clave:**
- N√∫mero at√≥mico (Z): N√∫mero de protones en el n√∫cleo
- N√∫mero m√°sico (A): Suma de protones y neutrones
- Is√≥topos: √Åtomos del mismo elemento con diferente n√∫mero de neutrones

**Modelos at√≥micos hist√≥ricos:**
- Modelo de Dalton (1803): √Åtomo como esfera indivisible
- Modelo de Thomson (1897): "Pud√≠n de pasas"
- Modelo de Rutherford (1911): √Åtomo nuclear
- Modelo de Bohr (1913): √ìrbitas circulares
- Modelo cu√°ntico actual: Orbitales probabil√≠sticos

La comprensi√≥n de la estructura at√≥mica nos permite predecir las propiedades qu√≠micas de los elementos y explicar c√≥mo se forman los enlaces qu√≠micos.
        """,
        "categoria": "Estructura At√≥mica"
    },
    {
        "titulo": "Configuraci√≥n Electr√≥nica y Orbitales",
        "contenido": """
La configuraci√≥n electr√≥nica describe c√≥mo se distribuyen los electrones en los orbitales at√≥micos.

**Principios fundamentales:**

1. **Principio de Aufbau**: Los electrones ocupan orbitales de menor energ√≠a primero
2. **Principio de exclusi√≥n de Pauli**: M√°ximo 2 electrones por orbital con spins opuestos
3. **Regla de Hund**: Un electr√≥n por orbital antes de aparear

**Orden de llenado de orbitales:**
1s¬≤ 2s¬≤ 2p‚Å∂ 3s¬≤ 3p‚Å∂ 4s¬≤ 3d¬π‚Å∞ 4p‚Å∂ 5s¬≤ 4d¬π‚Å∞ 5p‚Å∂ 6s¬≤ 4f¬π‚Å¥ 5d¬π‚Å∞ 6p‚Å∂ 7s¬≤ 5f¬π‚Å¥ 6d¬π‚Å∞ 7p‚Å∂

**Ejemplos:**
- Hidr√≥geno (H): 1s¬π
- Carbono (C): 1s¬≤ 2s¬≤ 2p¬≤
- Ox√≠geno (O): 1s¬≤ 2s¬≤ 2p‚Å¥
- Hierro (Fe): [Ar] 4s¬≤ 3d‚Å∂

**Configuraciones electr√≥nicas y propiedades:**
- Elementos con orbitales semillenos o llenos son m√°s estables
- La configuraci√≥n electr√≥nica determina las propiedades qu√≠micas
- Los electrones de valencia participan en los enlaces qu√≠micos
        """,
        "categoria": "Estructura At√≥mica"
    },
    # Agregar m√°s teor√≠as seg√∫n necesites...
]

# Datos de ejemplo para tareas de teor√≠a
TAREAS_EJEMPLO = [
    {
        "teoria_titulo": "Introducci√≥n a la Estructura At√≥mica",
        "descripcion_tarea": "Determinar la configuraci√≥n electr√≥nica de los primeros 20 elementos de la tabla peri√≥dica",
        "dificultad": "F√°cil"
    },
    {
        "teoria_titulo": "Introducci√≥n a la Estructura At√≥mica",
        "descripcion_tarea": "Calcular el n√∫mero de protones, neutrones y electrones en diferentes is√≥topos",
        "dificultad": "Intermedio"
    },
    {
        "teoria_titulo": "Configuraci√≥n Electr√≥nica y Orbitales",
        "descripcion_tarea": "Dibujar diagramas orbitales para elementos de transici√≥n",
        "dificultad": "Intermedio"
    },
    # Agregar m√°s tareas seg√∫n necesites...
]

def seed_teoria_data():
    """
    Funci√≥n para poblar la base de datos con datos de ejemplo de teor√≠a
    """
    db = SessionLocal()
    
    try:
        logger.info("Iniciando carga de datos de ejemplo para teor√≠a...")
        
        # Verificar si ya existen datos
        existing_teorias = db.query(Teoria).count()
        if existing_teorias > 0:
            logger.info(f"Ya existen {existing_teorias} teor√≠as en la base de datos. Saltando carga de datos.")
            return
        
        # Crear teor√≠as
        teoria_dict = {}  # Para mapear t√≠tulos con IDs
        
        for teoria_data in TEORIAS_EJEMPLO:
            try:
                nueva_teoria = Teoria(
                    titulo=teoria_data["titulo"],
                    contenido=teoria_data["contenido"].strip(),
                    categoria=teoria_data["categoria"]
                )
                
                db.add(nueva_teoria)
                db.flush()  # Para obtener el ID sin hacer commit
                teoria_dict[teoria_data["titulo"]] = nueva_teoria.id_teoria
                
                logger.info(f"Creada teor√≠a: {teoria_data['titulo']}")
                
            except Exception as e:
                logger.error(f"Error creando teor√≠a {teoria_data['titulo']}: {e}")
                continue
        
        # Crear tareas de teor√≠a
        for tarea_data in TAREAS_EJEMPLO:
            try:
                titulo_teoria = tarea_data["teoria_titulo"]
                if titulo_teoria in teoria_dict:
                    nueva_tarea = TeoriaTareaSimulacion(
                        # CORREGIR: usar id_teoria (coincide con el esquema SQL)
                        id_teoria=teoria_dict[titulo_teoria],
                        descripcion_tarea=tarea_data["descripcion_tarea"],
                        dificultad=tarea_data["dificultad"]
                        # id_reaccion se queda como None (nullable)
                    )
                    
                    db.add(nueva_tarea)
                    logger.info(f"Creada tarea para: {titulo_teoria}")
                    
            except Exception as e:
                logger.error(f"Error creando tarea para {tarea_data['teoria_titulo']}: {e}")
                continue
        
        # Hacer commit de todos los cambios
        db.commit()
        
        # Obtener estad√≠sticas finales
        total_teorias = db.query(Teoria).count()
        total_tareas = db.query(TeoriaTareaSimulacion).count()
        
        logger.info("‚úÖ Carga de datos completada exitosamente:")
        logger.info(f"   - {total_teorias} teor√≠as creadas")
        logger.info(f"   - {total_tareas} tareas creadas")
        
        # Mostrar distribuci√≥n por categor√≠as
        from sqlalchemy import func
        categorias = db.query(Teoria.categoria, func.count(Teoria.id_teoria)).group_by(Teoria.categoria).all()
        logger.info("üìä Distribuci√≥n por categor√≠as:")
        for categoria, count in categorias:
            logger.info(f"   - {categoria}: {count} teor√≠as")
            
    except Exception as e:
        logger.error(f"Error general en carga de datos: {e}")
        db.rollback()
        raise
    
    finally:
        db.close()

def reset_teoria_data():
    """
    Funci√≥n para limpiar todos los datos de teor√≠a (usar con precauci√≥n)
    """
    db = SessionLocal()
    
    try:
        logger.warning("‚ö†Ô∏è Eliminando todos los datos de teor√≠a...")
        
        # Eliminar tareas primero (por restricciones de clave for√°nea)
        tareas_deleted = db.query(TeoriaTareaSimulacion).delete()
        logger.info(f"Eliminadas {tareas_deleted} tareas")
        
        # Eliminar teor√≠as
        teorias_deleted = db.query(Teoria).delete()
        logger.info(f"Eliminadas {teorias_deleted} teor√≠as")
        
        db.commit()
        logger.info("‚úÖ Limpieza completada")
        
    except Exception as e:
        logger.error(f"Error en limpieza de datos: {e}")
        db.rollback()
        raise
    
    finally:
        db.close()

if __name__ == "__main__":
    # Configurar logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # Ejecutar carga de datos
    try:
        seed_teoria_data()
    except Exception as e:
        logger.error(f"Fallo en la carga de datos: {e}")
        exit(1)